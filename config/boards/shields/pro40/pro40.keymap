
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
	behaviors {
		ht: hold_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "Hold_Tap";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
		};
	};

	keymap {
		compatible = "zmk,keymap";

		default_layer {
			bindings = <
&kp ESC         &kp Q      &kp W      &kp E       &kp R     &kp T    &kp Y    &kp U       &kp I        &kp O      &kp P      &kp BSPC
&mo 1           &kp A      &kp S      &kp D       &kp F     &kp G    &kp H    &kp J       &kp K        &kp L                 &kp ENTER
&ht LSHFT TAB   &kp Z      &kp X      &kp C       &kp V     &kp B    &kp N    &kp M       &kp RSHFT    &kp UP     &kp DEL
&kp LCTRL       &kp LGUI   &kp LALT   &kp SPACE                      &mo 2    &kp RCTRL   &kp LEFT     &kp DOWN   &kp RIGHT
			>;
		};

		number_layer {
			bindings = <
&kp GRAVE    &kp N1     &kp N2     &kp N3     &kp N4    &kp N5      &kp N6    &kp N7        &kp N8      &kp N9     &kp N0     &kp BSPC 
&none        &trans     &trans     &trans     &trans    &trans      &trans    &trans        &kp SEMI    &kp SQT               &trans    
&trans       &trans     &trans     &trans     &trans    &kp COMMA   &kp DOT   &kp SLASH     &kp RSHFT   &kp MINUS  &kp EQUAL          
&trans       &trans     &trans     &trans                            &trans    &trans        &kp LBKT    &kp RBKT   &kp NUBS
			>;
		};

		function_layer {
			bindings = <
&kp F1 &kp F2  &kp F3       &kp F4       &kp F5     &kp F6  &kp F7 &kp F8 &kp F9        &kp F10       &kp F11        &kp F12
&kp CAPS       &trans       &trans       &trans     &trans  &trans &trans &trans        &kp C_VOL_DN  &kp C_VOL_UP   &kp PAGE_UP
&bt BT_CLR     &bootloader  &sys_reset   &trans     &trans  &trans &trans &kp C_MUTE    &trans        &kp C_ALT_AUDIO_INC        &kp PAGE_DOWN
&bt BT_SEL 0     &bt BT_SEL 2   &bt BT_SEL 3       &trans                    &trans &trans        &kp C_PREV    &kp C_PP       &kp C_NEXT
			>;
		};

	};
};
